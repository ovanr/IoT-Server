-- Code generated by protoc-gen-jsonpb_haskell 0.1.1, DO NOT EDIT.
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -Wno-orphans -Wno-unused-imports -Wno-missing-export-lists #-}
module Proto.Cmd.Rebootdt_JSON where

import           Prelude(($), (.), (<$>), pure, show, Maybe(..))

import           Data.ProtoLens.Runtime.Lens.Family2 ((^.), (.~), (&))
import           Data.Monoid (mconcat)
import           Control.Monad (msum)
import           Data.ProtoLens (defMessage)
import qualified Data.Aeson as A
import qualified Data.Aeson.Encoding as E
import           Data.ProtoLens.JSONPB as JSONPB
import qualified Data.Text as T

import           Proto.Cmd.Rebootdt as P
import           Proto.Cmd.Rebootdt_Fields as P

instance FromJSONPB Rebootopt where
  parseJSONPB = withObject "Rebootopt" $ \obj -> do
    perform' <- obj .: "perform"
    pure $ defMessage
      & P.perform .~ perform'

instance ToJSONPB Rebootopt where
  toJSONPB x = object
    [ "perform" .= (x^.perform)
    ]
  toEncodingPB x = pairs
    [ "perform" .= (x^.perform)
    ]

instance FromJSON Rebootopt where
  parseJSON = parseJSONPB

instance ToJSON Rebootopt where
  toJSON = toAesonValue
  toEncoding = toAesonEncoding
