-- Code generated by protoc-gen-jsonpb_haskell 0.1.1, DO NOT EDIT.
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -Wno-orphans -Wno-unused-imports -Wno-missing-export-lists #-}
module Proto.Sensors.Raspcamdt_JSON where

import           Prelude(($), (.), (<$>), pure, show, Maybe(..))

import           Data.ProtoLens.Runtime.Lens.Family2 ((^.), (.~), (&))
import           Data.Monoid (mconcat)
import           Control.Monad (msum)
import           Data.ProtoLens (defMessage)
import qualified Data.Aeson as A
import qualified Data.Aeson.Encoding as E
import           Data.ProtoLens.JSONPB as JSONPB
import qualified Data.Text as T

import           Proto.Sensors.Raspcamdt as P
import           Proto.Sensors.Raspcamdt_Fields as P

instance FromJSONPB Raspcamout where
  parseJSONPB = withObject "Raspcamout" $ \obj -> do
    encoding' <- obj .: "encoding"
    bin' <- obj .: "bin"
    pure $ defMessage
      & P.encoding .~ encoding'
      & P.bin .~ bin'

instance ToJSONPB Raspcamout where
  toJSONPB x = object
    [ "encoding" .= (x^.encoding)
    , "bin" .= (x^.bin)
    ]
  toEncodingPB x = pairs
    [ "encoding" .= (x^.encoding)
    , "bin" .= (x^.bin)
    ]

instance FromJSON Raspcamout where
  parseJSON = parseJSONPB

instance ToJSON Raspcamout where
  toJSON = toAesonValue
  toEncoding = toAesonEncoding

instance FromJSONPB Raspcamopt where
  parseJSONPB = withObject "Raspcamopt" $ \obj -> do
    vflip' <- obj .: "vflip"
    hflip' <- obj .: "hflip"
    rotation' <- obj .: "rotation"
    quality' <- obj .: "quality"
    encoding' <- obj .: "encoding"
    sharpness' <- obj .: "sharpness"
    contrast' <- obj .: "contrast"
    brightness' <- obj .: "brightness"
    saturation' <- obj .: "saturation"
    exposure' <- obj .: "exposure"
    awb' <- obj .: "awb"
    imxfx' <- obj .: "imxfx"
    pure $ defMessage
      & P.vflip .~ vflip'
      & P.hflip .~ hflip'
      & P.rotation .~ rotation'
      & P.quality .~ quality'
      & P.encoding .~ encoding'
      & P.sharpness .~ sharpness'
      & P.contrast .~ contrast'
      & P.brightness .~ brightness'
      & P.saturation .~ saturation'
      & P.exposure .~ exposure'
      & P.awb .~ awb'
      & P.imxfx .~ imxfx'

instance ToJSONPB Raspcamopt where
  toJSONPB x = object
    [ "vflip" .= (x^.vflip)
    , "hflip" .= (x^.hflip)
    , "rotation" .= (x^.rotation)
    , "quality" .= (x^.quality)
    , "encoding" .= (x^.encoding)
    , "sharpness" .= (x^.sharpness)
    , "contrast" .= (x^.contrast)
    , "brightness" .= (x^.brightness)
    , "saturation" .= (x^.saturation)
    , "exposure" .= (x^.exposure)
    , "awb" .= (x^.awb)
    , "imxfx" .= (x^.imxfx)
    ]
  toEncodingPB x = pairs
    [ "vflip" .= (x^.vflip)
    , "hflip" .= (x^.hflip)
    , "rotation" .= (x^.rotation)
    , "quality" .= (x^.quality)
    , "encoding" .= (x^.encoding)
    , "sharpness" .= (x^.sharpness)
    , "contrast" .= (x^.contrast)
    , "brightness" .= (x^.brightness)
    , "saturation" .= (x^.saturation)
    , "exposure" .= (x^.exposure)
    , "awb" .= (x^.awb)
    , "imxfx" .= (x^.imxfx)
    ]

instance FromJSON Raspcamopt where
  parseJSON = parseJSONPB

instance ToJSON Raspcamopt where
  toJSON = toAesonValue
  toEncoding = toAesonEncoding

instance FromJSONPB Encoding where
  parseJSONPB (JSONPB.String "JPEG") = pure JPEG
  parseJSONPB (JSONPB.String "PNG") = pure PNG
  parseJSONPB (JSONPB.String "BMP") = pure BMP
  parseJSONPB (JSONPB.String "GIF") = pure GIF
  parseJSONPB x = typeMismatch "Encoding" x

instance ToJSONPB Encoding where
  toJSONPB x _ = A.String . T.toUpper . T.pack $ show x
  toEncodingPB x _ = E.text . T.toUpper . T.pack  $ show x

instance FromJSON Encoding where
  parseJSON = parseJSONPB

instance ToJSON Encoding where
  toJSON = toAesonValue
  toEncoding = toAesonEncoding

instance FromJSONPB Exposure where
  parseJSONPB (JSONPB.String "EXP_OFF") = pure EXP_OFF
  parseJSONPB (JSONPB.String "EXP_AUTO") = pure EXP_AUTO
  parseJSONPB (JSONPB.String "EXP_NIGHT") = pure EXP_NIGHT
  parseJSONPB (JSONPB.String "EXP_NIGHTPREVIEW") = pure EXP_NIGHTPREVIEW
  parseJSONPB (JSONPB.String "EXP_BACKLIGHT") = pure EXP_BACKLIGHT
  parseJSONPB (JSONPB.String "EXP_SPOTLIGHT") = pure EXP_SPOTLIGHT
  parseJSONPB (JSONPB.String "EXP_SPORTS") = pure EXP_SPORTS
  parseJSONPB (JSONPB.String "EXP_SNOW") = pure EXP_SNOW
  parseJSONPB (JSONPB.String "EXP_BEACH") = pure EXP_BEACH
  parseJSONPB (JSONPB.String "EXP_VERYLONG") = pure EXP_VERYLONG
  parseJSONPB (JSONPB.String "EXP_FIXEDFPS") = pure EXP_FIXEDFPS
  parseJSONPB (JSONPB.String "EXP_ANTISHAKE") = pure EXP_ANTISHAKE
  parseJSONPB (JSONPB.String "EXP_FIREWORKS") = pure EXP_FIREWORKS
  parseJSONPB x = typeMismatch "Exposure" x

instance ToJSONPB Exposure where
  toJSONPB x _ = A.String . T.toUpper . T.pack $ show x
  toEncodingPB x _ = E.text . T.toUpper . T.pack  $ show x

instance FromJSON Exposure where
  parseJSON = parseJSONPB

instance ToJSON Exposure where
  toJSON = toAesonValue
  toEncoding = toAesonEncoding

instance FromJSONPB Awb where
  parseJSONPB (JSONPB.String "AWB_OFF") = pure AWB_OFF
  parseJSONPB (JSONPB.String "AWB_AUTO") = pure AWB_AUTO
  parseJSONPB (JSONPB.String "AWB_SUN") = pure AWB_SUN
  parseJSONPB (JSONPB.String "AWB_CLOUD") = pure AWB_CLOUD
  parseJSONPB (JSONPB.String "AWB_SHADE") = pure AWB_SHADE
  parseJSONPB (JSONPB.String "AWB_TUNGSTEN") = pure AWB_TUNGSTEN
  parseJSONPB (JSONPB.String "AWB_FLUORESCENT") = pure AWB_FLUORESCENT
  parseJSONPB (JSONPB.String "AWB_INCANDESCENT") = pure AWB_INCANDESCENT
  parseJSONPB (JSONPB.String "AWB_FLASH") = pure AWB_FLASH
  parseJSONPB (JSONPB.String "AWB_HORIZON") = pure AWB_HORIZON
  parseJSONPB (JSONPB.String "AWB_GREYWORLD") = pure AWB_GREYWORLD
  parseJSONPB x = typeMismatch "Awb" x

instance ToJSONPB Awb where
  toJSONPB x _ = A.String . T.toUpper . T.pack $ show x
  toEncodingPB x _ = E.text . T.toUpper . T.pack  $ show x

instance FromJSON Awb where
  parseJSON = parseJSONPB

instance ToJSON Awb where
  toJSON = toAesonValue
  toEncoding = toAesonEncoding

instance FromJSONPB Imxfx where
  parseJSONPB (JSONPB.String "IMXFX_NONE") = pure IMXFX_NONE
  parseJSONPB (JSONPB.String "IMXFX_NEGATIVE") = pure IMXFX_NEGATIVE
  parseJSONPB (JSONPB.String "IMXFX_SOLARISE") = pure IMXFX_SOLARISE
  parseJSONPB (JSONPB.String "IMXFX_SKETCH") = pure IMXFX_SKETCH
  parseJSONPB (JSONPB.String "IMXFX_DENOISE") = pure IMXFX_DENOISE
  parseJSONPB (JSONPB.String "IMXFX_EMBOSS") = pure IMXFX_EMBOSS
  parseJSONPB (JSONPB.String "IMXFX_OILPAINT") = pure IMXFX_OILPAINT
  parseJSONPB (JSONPB.String "IMXFX_HATCH") = pure IMXFX_HATCH
  parseJSONPB (JSONPB.String "IMXFX_GPEN") = pure IMXFX_GPEN
  parseJSONPB (JSONPB.String "IMXFX_PASTEL") = pure IMXFX_PASTEL
  parseJSONPB (JSONPB.String "IMXFX_WATERCOLOUR") = pure IMXFX_WATERCOLOUR
  parseJSONPB (JSONPB.String "IMXFX_FILM") = pure IMXFX_FILM
  parseJSONPB (JSONPB.String "IMXFX_BLUR") = pure IMXFX_BLUR
  parseJSONPB (JSONPB.String "IMXFX_SATURATION") = pure IMXFX_SATURATION
  parseJSONPB (JSONPB.String "IMXFX_COLOURSWAP") = pure IMXFX_COLOURSWAP
  parseJSONPB (JSONPB.String "IMXFX_WASHEDOUT") = pure IMXFX_WASHEDOUT
  parseJSONPB (JSONPB.String "IMXFX_POSTERISE") = pure IMXFX_POSTERISE
  parseJSONPB (JSONPB.String "IMXFX_COLOURPOINT") = pure IMXFX_COLOURPOINT
  parseJSONPB (JSONPB.String "IMXFX_COLOURBALANCE") = pure IMXFX_COLOURBALANCE
  parseJSONPB (JSONPB.String "IMXFX_CARTOON") = pure IMXFX_CARTOON
  parseJSONPB x = typeMismatch "Imxfx" x

instance ToJSONPB Imxfx where
  toJSONPB x _ = A.String . T.toUpper . T.pack $ show x
  toEncodingPB x _ = E.text . T.toUpper . T.pack  $ show x

instance FromJSON Imxfx where
  parseJSON = parseJSONPB

instance ToJSON Imxfx where
  toJSON = toAesonValue
  toEncoding = toAesonEncoding
