-- Code generated by protoc-gen-jsonpb_haskell 0.1.1, DO NOT EDIT.
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -Wno-orphans -Wno-unused-imports -Wno-missing-export-lists #-}
module Proto.Sensors.Systemdt_JSON where

import           Prelude(($), (.), (<$>), pure, show, Maybe(..))

import           Data.ProtoLens.Runtime.Lens.Family2 ((^.), (.~), (&))
import           Data.Monoid (mconcat)
import           Control.Monad (msum)
import           Data.ProtoLens (defMessage)
import qualified Data.Aeson as A
import qualified Data.Aeson.Encoding as E
import           Data.ProtoLens.JSONPB as JSONPB
import qualified Data.Text as T

import           Proto.Sensors.Systemdt as P
import           Proto.Sensors.Systemdt_Fields as P

instance FromJSONPB Systemopt where
  parseJSONPB = withObject "Systemopt" $ \_ -> pure defMessage

instance ToJSONPB Systemopt where
  toJSONPB _ = object []
  toEncodingPB _ = pairs []

instance FromJSON Systemopt where
  parseJSON = parseJSONPB

instance ToJSON Systemopt where
  toJSON = toAesonValue
  toEncoding = toAesonEncoding

instance FromJSONPB Systemout where
  parseJSONPB = withObject "Systemout" $ \obj -> do
    voltage' <- obj .: "voltage"
    wifiSignal' <- obj .: "wifiSignal"
    pure $ defMessage
      & P.voltage .~ voltage'
      & P.wifiSignal .~ wifiSignal'

instance ToJSONPB Systemout where
  toJSONPB x = object
    [ "voltage" .= (x^.voltage)
    , "wifiSignal" .= (x^.wifiSignal)
    ]
  toEncodingPB x = pairs
    [ "voltage" .= (x^.voltage)
    , "wifiSignal" .= (x^.wifiSignal)
    ]

instance FromJSON Systemout where
  parseJSON = parseJSONPB

instance ToJSON Systemout where
  toJSON = toAesonValue
  toEncoding = toAesonEncoding
