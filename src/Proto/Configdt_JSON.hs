-- Code generated by protoc-gen-jsonpb_haskell 0.1.1, DO NOT EDIT.
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -Wno-orphans -Wno-unused-imports -Wno-missing-export-lists #-}
module Proto.Configdt_JSON where

import           Prelude(($), (.), (<$>), pure, show, Maybe(..))

import           Data.ProtoLens.Runtime.Lens.Family2 ((^.), (.~), (&))
import           Data.Monoid (mconcat)
import           Control.Monad (msum)
import           Data.ProtoLens (defMessage)
import qualified Data.Aeson as A
import qualified Data.Aeson.Encoding as E
import           Data.ProtoLens.JSONPB as JSONPB
import qualified Data.Text as T

import           Proto.Sensors.Raspcamdt_JSON ()
import           Proto.Sensors.Cpudt_JSON ()
import           Proto.Sensors.Systemdt_JSON ()
import           Proto.Sensors.Genericdt_JSON ()
import           Proto.Configdt as P
import           Proto.Configdt_Fields as P

instance FromJSONPB Time where
  parseJSONPB = withObject "Time" $ \obj -> do
    hour' <- obj .: "hour"
    minute' <- obj .: "minute"
    pure $ defMessage
      & P.hour .~ hour'
      & P.minute .~ minute'

instance ToJSONPB Time where
  toJSONPB x = object
    [ "hour" .= (x^.hour)
    , "minute" .= (x^.minute)
    ]
  toEncodingPB x = pairs
    [ "hour" .= (x^.hour)
    , "minute" .= (x^.minute)
    ]

instance FromJSON Time where
  parseJSON = parseJSONPB

instance ToJSON Time where
  toJSON = toAesonValue
  toEncoding = toAesonEncoding

instance FromJSONPB Modconf where
  parseJSONPB = withObject "Modconf" $ \obj -> do
    raspCam' <- obj A..:? "raspCam"
    cpu' <- obj A..:? "cpu"
    system' <- obj A..:? "system"
    generic' <- obj A..:? "generic"
    pure $ defMessage
      & P.maybe'raspCam .~ raspCam'
      & P.maybe'cpu .~ cpu'
      & P.maybe'system .~ system'
      & P.maybe'generic .~ generic'

instance ToJSONPB Modconf where
  toJSONPB x = object
    [ "raspCam" .= (x^.maybe'raspCam)
    , "cpu" .= (x^.maybe'cpu)
    , "system" .= (x^.maybe'system)
    , "generic" .= (x^.maybe'generic)
    ]
  toEncodingPB x = pairs
    [ "raspCam" .= (x^.maybe'raspCam)
    , "cpu" .= (x^.maybe'cpu)
    , "system" .= (x^.maybe'system)
    , "generic" .= (x^.maybe'generic)
    ]

instance FromJSON Modconf where
  parseJSON = parseJSONPB

instance ToJSON Modconf where
  toJSON = toAesonValue
  toEncoding = toAesonEncoding

instance FromJSONPB Devconf where
  parseJSONPB = withObject "Devconf" $ \obj -> do
    mqttHost' <- obj .: "mqttHost"
    mqttUser' <- obj .: "mqttUser"
    mqttPass' <- obj .: "mqttPass"
    burstInterval' <- obj .: "burstInterval"
    burstCount' <- obj .: "burstCount"
    wakeOn' <- obj .: "wakeOn"
    sensorConf' <- obj A..:? "sensorConf"
    pure $ defMessage
      & P.mqttHost .~ mqttHost'
      & P.mqttUser .~ mqttUser'
      & P.mqttPass .~ mqttPass'
      & P.burstInterval .~ burstInterval'
      & P.burstCount .~ burstCount'
      & P.wakeOn .~ wakeOn'
      & P.maybe'sensorConf .~ sensorConf'

instance ToJSONPB Devconf where
  toJSONPB x = object
    [ "mqttHost" .= (x^.mqttHost)
    , "mqttUser" .= (x^.mqttUser)
    , "mqttPass" .= (x^.mqttPass)
    , "burstInterval" .= (x^.burstInterval)
    , "burstCount" .= (x^.burstCount)
    , "wakeOn" .= (x^.wakeOn)
    , "sensorConf" .= (x^.maybe'sensorConf)
    ]
  toEncodingPB x = pairs
    [ "mqttHost" .= (x^.mqttHost)
    , "mqttUser" .= (x^.mqttUser)
    , "mqttPass" .= (x^.mqttPass)
    , "burstInterval" .= (x^.burstInterval)
    , "burstCount" .= (x^.burstCount)
    , "wakeOn" .= (x^.wakeOn)
    , "sensorConf" .= (x^.maybe'sensorConf)
    ]

instance FromJSON Devconf where
  parseJSON = parseJSONPB

instance ToJSON Devconf where
  toJSON = toAesonValue
  toEncoding = toAesonEncoding
