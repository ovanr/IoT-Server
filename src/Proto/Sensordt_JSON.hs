-- Code generated by protoc-gen-jsonpb_haskell 0.1.1, DO NOT EDIT.
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -Wno-orphans -Wno-unused-imports -Wno-missing-export-lists #-}
module Proto.Sensordt_JSON where

import           Prelude(($), (.), (<$>), pure, show, Maybe(..))

import           Data.ProtoLens.Runtime.Lens.Family2 ((^.), (.~), (&))
import           Data.Monoid (mconcat)
import           Control.Monad (msum)
import           Data.ProtoLens (defMessage)
import qualified Data.Aeson as A
import qualified Data.Aeson.Encoding as E
import           Data.ProtoLens.JSONPB as JSONPB
import qualified Data.Text as T

import           Proto.Sensors.Cpudt_JSON ()
import           Proto.Sensors.Raspcamdt_JSON ()
import           Proto.Sensors.Systemdt_JSON ()
import           Proto.Sensordt as P
import           Proto.Sensordt_Fields as P

instance FromJSONPB Output'Output where
  parseJSONPB = A.withObject "Output'Output" $ \obj -> mconcat
    [
      Output'Cpu <$> parseField obj "cpu"
    , Output'Cam <$> parseField obj "cam"
    , Output'System <$> parseField obj "system"
    ]

instance ToJSONPB Output'Output where
  toJSONPB (Output'Cpu x) = object [ "cpu" .= Just x ]
  toJSONPB (Output'Cam x) = object [ "cam" .= Just x ]
  toJSONPB (Output'System x) = object [ "system" .= Just x ]
  toEncodingPB (Output'Cpu x) = pairs [ "cpu" .= Just x ]
  toEncodingPB (Output'Cam x) = pairs [ "cam" .= Just x ]
  toEncodingPB (Output'System x) = pairs [ "system" .= Just x ]

instance FromJSON Output'Output where
  parseJSON = parseJSONPB

instance ToJSON Output'Output where
  toJSON = toAesonValue
  toEncoding = toAesonEncoding

instance FromJSONPB Output where
  parseJSONPB = withObject "Output" $ \obj -> do
    output' <- obj A..:? "output"
    pure $ defMessage
      & P.maybe'output .~ output'

instance ToJSONPB Output where
  toJSONPB x = object
    [ "output" .= (x^.maybe'output)
    ]
  toEncodingPB x = pairs
    [ "output" .= (x^.maybe'output)
    ]

instance FromJSON Output where
  parseJSON = parseJSONPB

instance ToJSON Output where
  toJSON = toAesonValue
  toEncoding = toAesonEncoding

instance FromJSONPB Sensorout where
  parseJSONPB = withObject "Sensorout" $ \obj -> do
    outputs' <- obj .: "outputs"
    pure $ defMessage
      & P.outputs .~ outputs'

instance ToJSONPB Sensorout where
  toJSONPB x = object
    [ "outputs" .= (x^.outputs)
    ]
  toEncodingPB x = pairs
    [ "outputs" .= (x^.outputs)
    ]

instance FromJSON Sensorout where
  parseJSON = parseJSONPB

instance ToJSON Sensorout where
  toJSON = toAesonValue
  toEncoding = toAesonEncoding
