-- Code generated by protoc-gen-jsonpb_haskell 0.1.1, DO NOT EDIT.
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -Wno-orphans -Wno-unused-imports -Wno-missing-export-lists #-}
module Proto.Cmddt_JSON where

import           Prelude(($), (.), (<$>), pure, show, Maybe(..))

import           Data.ProtoLens.Runtime.Lens.Family2 ((^.), (.~), (&))
import           Data.Monoid (mconcat)
import           Control.Monad (msum)
import           Data.ProtoLens (defMessage)
import qualified Data.Aeson as A
import qualified Data.Aeson.Encoding as E
import           Data.ProtoLens.JSONPB as JSONPB
import qualified Data.Text as T

import           Proto.Cmd.Rebootdt_JSON ()
import           Proto.Cmd.Confupdatedt_JSON ()
import           Proto.Cmddt as P
import           Proto.Cmddt_Fields as P

instance FromJSONPB Cmd'Cmd where
  parseJSONPB = A.withObject "Cmd'Cmd" $ \obj -> mconcat
    [
      Cmd'Reboot <$> parseField obj "reboot"
    , Cmd'ConfUpdate <$> parseField obj "conf_update"
    ]

instance ToJSONPB Cmd'Cmd where
  toJSONPB (Cmd'Reboot x) = object [ "reboot" .= Just x ]
  toJSONPB (Cmd'ConfUpdate x) = object [ "conf_update" .= Just x ]
  toEncodingPB (Cmd'Reboot x) = pairs [ "reboot" .= Just x ]
  toEncodingPB (Cmd'ConfUpdate x) = pairs [ "conf_update" .= Just x ]

instance FromJSON Cmd'Cmd where
  parseJSON = parseJSONPB

instance ToJSON Cmd'Cmd where
  toJSON = toAesonValue
  toEncoding = toAesonEncoding

instance FromJSONPB Cmd where
  parseJSONPB = withObject "Cmd" $ \obj -> do
    cmd' <- obj A..:? "cmd"
    pure $ defMessage
      & P.maybe'cmd .~ cmd'

instance ToJSONPB Cmd where
  toJSONPB x = object
    [ "cmd" .= (x^.maybe'cmd)
    ]
  toEncodingPB x = pairs
    [ "cmd" .= (x^.maybe'cmd)
    ]

instance FromJSON Cmd where
  parseJSON = parseJSONPB

instance ToJSON Cmd where
  toJSON = toAesonValue
  toEncoding = toAesonEncoding

instance FromJSONPB Cmdin where
  parseJSONPB = withObject "Cmdin" $ \obj -> do
    cmds' <- obj .: "cmds"
    pure $ defMessage
      & P.cmds .~ cmds'

instance ToJSONPB Cmdin where
  toJSONPB x = object
    [ "cmds" .= (x^.cmds)
    ]
  toEncodingPB x = pairs
    [ "cmds" .= (x^.cmds)
    ]

instance FromJSON Cmdin where
  parseJSON = parseJSONPB

instance ToJSON Cmdin where
  toJSON = toAesonValue
  toEncoding = toAesonEncoding
